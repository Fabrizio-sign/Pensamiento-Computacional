Inicio.
Cargar el cat√°logo de pel√≠culas/libros desde un archivo (CSV o JSON).
Mostrar men√∫ principal con opciones:
        (1) Ver cat√°logo
        (2) Calificar contenido
        (3) Obtener recomendaciones
        (4) Salir
     Si el usuario elige "Ver cat√°logo":
        Mostrar lista de pel√≠culas/libros con su t√≠tulo y g√©nero.
        Regresar al men√∫ principal.
     Si el usuario elige "Calificar contenido":
        Pedir al usuario que ingrese el t√≠tulo que desea calificar.
        Guardar su calificaci√≥n (ejemplo: de 1 a 5 estrellas) en un archivo de usuarios o en memoria.
        Regresar al men√∫ principal.
     Si el usuario elige "Obtener recomendaciones":
        Analizar las calificaciones previas del usuario.
        Identificar los g√©neros con mejores calificaciones.
        Seleccionar al azar (o por puntuaci√≥n) pel√≠culas/libros de esos g√©neros.
        Mostrar las recomendaciones al usuario.
        Regresar al men√∫ principal.
     Si el usuario elige "Salir":
        Guardar los cambios en las calificaciones.
Terminar la ejecuci√≥n.
Fin del programa.

import random

= ------------------------
= Funciones de operadores
= ------------------------

def promedio_calificaciones(calificaciones):
    """
    Calcula el promedio de las calificaciones de un usuario.
    Uso de operador aritm√©tico: suma (+), divisi√≥n (/)
    """
    if not calificaciones:
        return 0
    return sum(calificaciones) / len(calificaciones)

def mejor_peor_calificacion(calificaciones):
    """
    Obtiene la mejor y peor calificaci√≥n.
    Uso de operadores: max(), min()
    """
    if not calificaciones:
        return None, None
    return max(calificaciones), min(calificaciones)

def comparar_generos(genero1, genero2, puntaje1, puntaje2):
    """
    Compara calificaciones promedio de dos g√©neros.
    Uso de operadores l√≥gicos y de comparaci√≥n.
    """
    if puntaje1 > puntaje2:
        return f"El g√©nero {genero1} gusta m√°s que {genero2}"
    elif puntaje1 < puntaje2:
        return f"El g√©nero {genero2} gusta m√°s que {genero1}"
    else:
        return f"Los g√©neros {genero1} y {genero2} gustan igual."

def multiplicar_recomendaciones(base, factor):
    """
    Multiplica el n√∫mero de recomendaciones seg√∫n un factor.
    Uso de operador aritm√©tico: *
    """
    return base * factor

def generar_pregunta_operadores(pregunta):
    """
    Integra operaciones con operadores aleatorios (ejemplo tipo examen).
    """
    pregunta += 1
    print(f"\nPregunta {pregunta}: ")

    val1 = random.randint(1, 50)
    val2 = random.randint(1, 50)

    print(f"{val1} + {val2} = {val1 + val2}")
    print(f"{val1} - {val2} = {val1 - val2}")
    print(f"{val1} * {val2} = {val1 * val2}")
    print(f"{val1} / {val2} = {val1 / val2 if val2 != 0 else 'Indefinido'}")

    return pregunta

# ------------------------
# Men√∫ principal
# ------------------------

def menu():
    calificaciones_usuario = [4, 5, 3, 4, 5]  # ejemplo
    pregunta = 0

    while True:
        print("\n--- MEN√ö PRINCIPAL ---")
        print("1. Ver cat√°logo")
        print("2. Calificar contenido")
        print("3. Obtener recomendaciones")
        print("4. Salir")
        print("5. Operaciones con operadores")  # <<--- nueva opci√≥n

        opcion = input("Elige una opci√≥n: ")

        if opcion == "1":
            print("Aqu√≠ se mostrar√≠a el cat√°logo de pel√≠culas/libros. üòä")

        elif opcion == "2":
            titulo = input("Ingresa el t√≠tulo a calificar: ")
            calif = int(input("Ingresa tu calificaci√≥n (1 a 5): "))
            calificaciones_usuario.append(calif)
            print(f"Guardada calificaci√≥n {calif} para {titulo}.")

        elif opcion == "3":
            print("üé¨ Generando recomendaciones basadas en tus gustos...")
            prom = promedio_calificaciones(calificaciones_usuario)
            print("Tu promedio de calificaciones es:", prom)

        elif opcion == "4":
            print("‚úÖ Guardando cambios y saliendo...")
            break

        elif opcion == "5":  # Nueva opci√≥n de operadores
            print("\n--- Operaciones con Operadores ---")
            print("Promedio de calificaciones:", promedio_calificaciones(calificaciones_usuario))
            print("Mejor y peor calificaci√≥n:", mejor_peor_calificacion(calificaciones_usuario))
            print(comparar_generos("Acci√≥n", "Drama", 4.5, 3.8))
            print("Recomendaciones multiplicadas:", multiplicar_recomendaciones(3, 2))
            pregunta = generar_pregunta_operadores(pregunta)

        else:
            print("Opci√≥n no v√°lida, intenta de nuevo.")

# ------------------------
# Inicio del programa
# ------------------------
if __name__ == "__main__":
    menu()
import json
import random

# -------------------------------
# Funciones del programa
# -------------------------------

def cargar_catalogo(nombre_archivo):
    """Carga el cat√°logo de pel√≠culas/libros desde un archivo JSON."""
    try:
        with open(nombre_archivo, "r", encoding="utf-8") as archivo:
            return json.load(archivo)
    except FileNotFoundError:
        print("No se encontr√≥ el archivo, se iniciar√° un cat√°logo vac√≠o.")
        return []

def guardar_catalogo(nombre_archivo, catalogo):
    """Guarda las calificaciones en el archivo JSON."""
    with open(nombre_archivo, "w", encoding="utf-8") as archivo:
        json.dump(catalogo, archivo, ensure_ascii=False, indent=4)

def ver_catalogo(catalogo):
    """Muestra la lista de pel√≠culas/libros con t√≠tulo y g√©nero."""
    if not catalogo:
        print("El cat√°logo est√° vac√≠o.")
    else:
        for i, item in enumerate(catalogo, start=1):
            print(f"{i}. {item['titulo']} ({item['genero']}) - Calificaci√≥n: {item.get('calificacion', 'N/A')}")

def calificar_contenido(catalogo):
    """Permite al usuario calificar un t√≠tulo."""
    titulo = input("Ingrese el t√≠tulo que desea calificar: ")
    for item in catalogo:
        if item["titulo"].lower() == titulo.lower():
            try:
                calificacion = int(input("Ingrese su calificaci√≥n (1 a 5): "))
                if 1 <= calificacion <= 5:
                    item["calificacion"] = calificacion
                    print(f"Se guard√≥ la calificaci√≥n de {titulo}: {calificacion} estrellas.")
                else:
                    print("La calificaci√≥n debe estar entre 1 y 5.")
            except ValueError:
                print("Debe ingresar un n√∫mero v√°lido.")
            return
    print("El t√≠tulo no se encontr√≥ en el cat√°logo.")

def obtener_recomendaciones(catalogo):
    """Genera recomendaciones basadas en las calificaciones."""
    generos_favoritos = {}

    for item in catalogo:
        if "calificacion" in item:
            genero = item["genero"]
            generos_favoritos.setdefault(genero, []).append(item["calificacion"])

    if not generos_favoritos:
        print("No hay calificaciones registradas para generar recomendaciones.")
        return

    # Calcular promedio de calificaciones por g√©nero
    promedios = {g: sum(cals) / len(cals) for g, cals in generos_favoritos.items()}
    mejor_genero = max(promedios, key=promedios.get)

    # Seleccionar recomendaci√≥n de ese g√©nero
    recomendaciones = [item for item in catalogo if item["genero"] == mejor_genero]
    recomendacion = random.choice(recomendaciones)
    
    print(f"Te recomendamos: {recomendacion['titulo']} ({recomendacion['genero']})")

def mostrar_menu():
    """Muestra el men√∫ principal y devuelve la opci√≥n elegida."""
    print("\n--- Men√∫ Principal ---")
    print("1. Ver cat√°logo")
    print("2. Calificar contenido")
    print("3. Obtener recomendaciones")
    print("4. Salir")
    return input("Elige una opci√≥n: ")

# -------------------------------
# Programa principal
# -------------------------------

def main():
    archivo = "catalogo.json"
    catalogo = cargar_catalogo(archivo)

    while True:
        opcion = mostrar_menu()

        if opcion == "1":
            ver_catalogo(catalogo)
        elif opcion == "2":
            calificar_contenido(catalogo)
        elif opcion == "3":
            obtener_recomendaciones(catalogo)
        elif opcion == "4":
            guardar_catalogo(archivo, catalogo)
            print("Cambios guardados. Saliendo del programa...")
            break
        else:
            print("Opci√≥n inv√°lida, intenta de nuevo.")

# ------------------------------
# Ejecutar programa
# ------------------------------


import random

# ==============================
# Funciones de operadores
# ==============================

def promedio_calificaciones(calificaciones):
    """ Calcula el promedio de calificaciones. """
    if not calificaciones:
        return 0
    return sum(calificaciones) / len(calificaciones)

def mejor_peor_calificacion(calificaciones):
    """ Obtiene la mejor y peor calificaci√≥n. """
    if not calificaciones:
        return None, None
    return max(calificaciones), min(calificaciones)

def comparar_generos(genero1, genero2, puntaje1, puntaje2):
    """ Compara calificaciones promedio de dos g√©neros. """
    if puntaje1 > puntaje2:
        return f"El g√©nero {genero1} gusta m√°s que {genero2}"
    elif puntaje2 > puntaje1:
        return f"El g√©nero {genero2} gusta m√°s que {genero1}"
    else:
        return f"Los g√©neros {genero1} y {genero2} gustan igual."

def multiplicar_recomendaciones(base, factor):
    """ Multiplica n√∫mero de recomendaciones por un factor. """
    return base * factor

def generar_pregunta_operadores(pregunta):
    """ Integra operaciones con operadores aleatorios. """
    pregunta += 1
    print(f"\nPregunta {pregunta}: ")
    val1 = random.randint(1, 50)
    val2 = random.randint(1, 50)
    print(f"{val1} + {val2} = {val1 + val2}")
    print(f"{val1} - {val2} = {val1 - val2}")
    print(f"{val1} * {val2} = {val1 * val2}")
    print(f"{val1} / {val2} = {val1 / val2 if val2 != 0 else 'Indefinido'}")
    return pregunta

# ==============================
# Datos simulados
# ==============================
catalogo = [
    {"titulo": "Matrix", "genero": "Ciencia Ficci√≥n"},
    {"titulo": "El Se√±or de los Anillos", "genero": "Fantas√≠a"},
    {"titulo": "Interestelar", "genero": "Ciencia Ficci√≥n"},
]

calificaciones = {}  # Diccionario {titulo: calificaci√≥n}

# ==============================
# Men√∫ principal con decisiones
# ==============================
def menu():
    while True:
        print("\n--- MEN√ö PRINCIPAL ---")
        print("1. Ver cat√°logo")
        print("2. Calificar contenido")
        print("3. Obtener recomendaciones")
        print("4. Salir")

        opcion = input("Elige una opci√≥n: ")

        if opcion == "1":
            # Ver cat√°logo
            print("\n--- CAT√ÅLOGO ---")
            for item in catalogo:
                print(f"{item['titulo']} - {item['genero']}")
        
        elif opcion == "2":
            # Calificar contenido
            titulo = input("Escribe el t√≠tulo que deseas calificar: ")
            existe = False
            for item in catalogo:
                if item["titulo"].lower() == titulo.lower():
                    existe = True
                    try:
                        calif = int(input("Ingresa tu calificaci√≥n (1 a 5): "))
                        if 1 <= calif <= 5:
                            calificaciones[item["titulo"]] = calif
                            print(f"‚úÖ Guardado: {item['titulo']} = {calif} estrellas")
                        else:
                            print("‚ùå La calificaci√≥n debe ser entre 1 y 5.")
                    except ValueError:
                        print("‚ùå Ingresa un n√∫mero v√°lido.")
            if not existe:
                print("‚ùå Ese t√≠tulo no est√° en el cat√°logo.")
        
        elif opcion == "3":
            # Obtener recomendaciones
            if not calificaciones:
                print("‚ö†Ô∏è Primero debes calificar alg√∫n contenido.")
            else:
                print("\n--- RECOMENDACIONES ---")
                mejor, peor = mejor_peor_calificacion(list(calificaciones.values()))
                print(f"Tu mejor calificaci√≥n fue: {mejor}")
                print(f"Tu peor calificaci√≥n fue: {peor}")
                print("Basado en tus gustos, podr√≠as disfrutar:")
                for item in catalogo:
                    if item["titulo"] not in calificaciones:
                        print(f"- {item['titulo']} ({item['genero']})")
        
        elif opcion == "4":
            # Salir
            print("Guardando calificaciones y saliendo...")
            break
        
        else:
            print("‚ùå Opci√≥n no v√°lida, intenta de nuevo.")

# ==============================
# Ejecutar programa
# ==============================
menu()


if __name__ == "__main__":
    main()
