Inicio.
Cargar el catálogo de películas/libros desde un archivo (CSV o JSON).
Mostrar menú principal con opciones:
        (1) Ver catálogo
        (2) Calificar contenido
        (3) Obtener recomendaciones
        (4) Salir
     Si el usuario elige "Ver catálogo":
        Mostrar lista de películas/libros con su título y género.
        Regresar al menú principal.
     Si el usuario elige "Calificar contenido":
        Pedir al usuario que ingrese el título que desea calificar.
        Guardar su calificación (ejemplo: de 1 a 5 estrellas) en un archivo de usuarios o en memoria.
        Regresar al menú principal.
     Si el usuario elige "Obtener recomendaciones":
        Analizar las calificaciones previas del usuario.
        Identificar los géneros con mejores calificaciones.
        Seleccionar al azar (o por puntuación) películas/libros de esos géneros.
        Mostrar las recomendaciones al usuario.
        Regresar al menú principal.
     Si el usuario elige "Salir":
        Guardar los cambios en las calificaciones.
Terminar la ejecución.
Fin del programa.

import json
import random

# -------------------------------
# Funciones de catálogo
# -------------------------------
def cargar_catalogo(nombre_archivo):
    """Carga el catálogo desde archivo JSON."""
    try:
        with open(nombre_archivo, "r", encoding="utf-8") as archivo:
            return json.load(archivo)
    except FileNotFoundError:
        print("No se encontró el archivo, se iniciará un catálogo vacío.")
        return []

def guardar_catalogo(nombre_archivo, catalogo):
    """Guarda el catálogo en un archivo JSON."""
    with open(nombre_archivo, "w", encoding="utf-8") as archivo:
        json.dump(catalogo, archivo, ensure_ascii=False, indent=4)

def ver_catalogo(catalogo):
    """Muestra los títulos en el catálogo."""
    if not catalogo:
        print("El catálogo está vacío.")
    else:
        for i, item in enumerate(catalogo, start=1):
            print(f"{i}. {item['titulo']} ({item['genero']}) - Calificación: {item.get('calificacion', 'N/A')}")

def calificar_contenido(catalogo):
    """Permite calificar un título del catálogo."""
    titulo = input("Ingrese el título que desea calificar: ")
    for item in catalogo:
        if item["titulo"].lower() == titulo.lower():
            try:
                calificacion = int(input("Ingrese su calificación (1 a 5): "))
                if 1 <= calificacion <= 5:
                    item["calificacion"] = calificacion
                    print(f"Se guardó la calificación de {titulo}: {calificacion} estrellas.")
                else:
                    print("La calificación debe estar entre 1 y 5.")
            except ValueError:
                print("Debe ingresar un número válido.")
            return
    print("El título no se encontró en el catálogo.")

def obtener_recomendaciones(catalogo):
    """Genera recomendaciones basadas en calificaciones."""
    generos_favoritos = {}
    for item in catalogo:
        if "calificacion" in item:
            generos_favoritos.setdefault(item["genero"], []).append(item["calificacion"])

    if not generos_favoritos:
        print("No hay calificaciones registradas para generar recomendaciones.")
        return

    # Calcular promedio por género
    promedios = {g: sum(cals) / len(cals) for g, cals in generos_favoritos.items()}
    mejor_genero = max(promedios, key=promedios.get)
    recomendaciones = [item for item in catalogo if item["genero"] == mejor_genero]
    recomendacion = random.choice(recomendaciones)

    print(f"Te recomendamos: {recomendacion['titulo']} ({recomendacion['genero']})")

# -------------------------------
# Funciones de operadores extra
# -------------------------------
def promedio_calificaciones(calificaciones):
    return sum(calificaciones) / len(calificaciones) if calificaciones else 0

def mejor_peor_calificacion(calificaciones):
    return (max(calificaciones), min(calificaciones)) if calificaciones else (None, None)

def comparar_generos(g1, g2, p1, p2):
    if p1 > p2:
        return f"El género {g1} gusta más que {g2}"
    elif p2 > p1:
        return f"El género {g2} gusta más que {g1}"
    return f"Los géneros {g1} y {g2} gustan igual."

def multiplicar_recomendaciones(base, factor):
    return base * factor

def generar_pregunta_operadores(pregunta):
    pregunta += 1
    print(f"\nPregunta {pregunta}:")
    val1, val2 = random.randint(1, 50), random.randint(1, 50)
    print(f"{val1} + {val2} = {val1 + val2}")
    print(f"{val1} - {val2} = {val1 - val2}")
    print(f"{val1} * {val2} = {val1 * val2}")
    print(f"{val1} / {val2} = {val1 / val2 if val2 != 0 else 'Indefinido'}")
    return pregunta

# -------------------------------
# Ejemplos de ciclos while
# -------------------------------
def ejemplos_ciclos():
    print("\n--- Ejemplos de estructuras de repetición (while) ---")

    # 1. Contador simple con while
    print("\nEjemplo 1: Contador hasta 5")
    i = 1
    while i <= 5:
        print("Contador:", i)
        i += 1

    # 2. Suma de números hasta que el usuario escriba 0
    print("\nEjemplo 2: Suma de números hasta que escribas 0")
    suma = 0
    while True:
        try:
            n = int(input("Ingresa un número (0 para terminar): "))
            if n == 0:
                break
            suma += n
        except ValueError:
            print("❌ Debes ingresar un número válido.")
    print("La suma total es:", suma)

    # 3. Validación con while
    print("\nEjemplo 3: Validación de número entre 1 y 5")
    opcion = 0
    while opcion < 1 or opcion > 5:
        try:
            opcion = int(input("Ingresa un número del 1 al 5: "))
        except ValueError:
            print("❌ Eso no es un número.")
    print("Número válido ingresado:", opcion)

# -------------------------------
# Programa principal
# -------------------------------
def main():
    archivo = "catalogo.json"
    catalogo = cargar_catalogo(archivo)
    pregunta = 0

    while True:
        print("\n--- MENÚ PRINCIPAL ---")
        print("1. Ver catálogo")
        print("2. Calificar contenido")
        print("3. Obtener recomendaciones")
        print("4. Operaciones con operadores")
        print("5. Ejemplos de ciclos while")
        print("6. Salir")

        opcion = input("Elige una opción: ")

        if opcion == "1":
            ver_catalogo(catalogo)
        elif opcion == "2":
            calificar_contenido(catalogo)
        elif opcion == "3":
            obtener_recomendaciones(catalogo)
        elif opcion == "4":
            print("\n--- Operadores ---")
            calificaciones_usuario = [c.get("calificacion", 0) for c in catalogo if "calificacion" in c]
            print("Promedio:", promedio_calificaciones(calificaciones_usuario))
            print("Mejor y peor:", mejor_peor_calificacion(calificaciones_usuario))
            print(comparar_generos("Acción", "Drama", 4.5, 3.8))
            print("Recomendaciones multiplicadas:", multiplicar_recomendaciones(3, 2))
            pregunta = generar_pregunta_operadores(pregunta)
        elif opcion == "5":
            ejemplos_ciclos()
        elif opcion == "6":
            guardar_catalogo(archivo, catalogo)
            print("Cambios guardados. ¡Hasta luego!")
            break
        else:
            print("Opción inválida, intenta de nuevo.")

if __name__ == "__main__":
    main()
